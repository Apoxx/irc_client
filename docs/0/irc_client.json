{"dependencies":[{"id":"dart.core","name":"dart:core","children":[{"id":"Object","name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"==1()","name":"==","children":[{"id":"other","name":"other","kind":"param"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"id":"toString0()","name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","line":"48"},{"id":"noSuchMethod1()","name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"id":"invocation","name":"invocation","kind":"param"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"id":"hashCode","name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"id":"runtimeType","name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","line":"65"},{"id":"Object0()","name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","line":"18"}],"uri":"dart-sdk//lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","line":"10"}],"uri":"dart-sdk//lib/core/core.dart","kind":"library","line":"5"},{"id":"dart.async","name":"dart:async","children":[{"interfaces":[{"name":"StreamTransformer","refId":"dart.async/StreamTransformer","arguments":[{"name":"S","refId":"dart.async/StreamEventTransformer/S"},{"name":"T","refId":"dart.async/StreamEventTransformer/T"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"StreamEventTransformer","name":"StreamEventTransformer","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamEventTransformer/T"}]},"id":"bind1()","name":"bind","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamEventTransformer/S"}]},"id":"source","name":"source","kind":"param"}],"kind":"method","line":"1068"},{"returnType":{"name":"void","refId":"void"},"id":"handleData2()","name":"handleData","children":[{"ref":{"name":"S","refId":"dart.async/StreamEventTransformer/S"},"id":"event","name":"event","kind":"param"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamEventTransformer/T"}]},"id":"sink","name":"sink","kind":"param"}],"kind":"method","comment":"\nAct on incoming data event.\n\nThe method may generate any number of events on the sink, but should\nnot throw.\n","line":"1078"},{"returnType":{"name":"void","refId":"void"},"id":"handleError2()","name":"handleError","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"id":"error","name":"error","kind":"param"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamEventTransformer/T"}]},"id":"sink","name":"sink","kind":"param"}],"kind":"method","comment":"\nAct on incoming error event.\n\nThe method may generate any number of events on the sink, but should\nnot throw.\n","line":"1089"},{"returnType":{"name":"void","refId":"void"},"id":"handleDone1()","name":"handleDone","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamEventTransformer/T"}]},"id":"sink","name":"sink","kind":"param"}],"kind":"method","comment":"\nAct on incoming done event.\n\nThe method may generate any number of events on the sink, but should\nnot throw.\n","line":"1099"},{"id":"StreamEventTransformer0()","name":"StreamEventTransformer","kind":"constructor","line":"1066"},{"id":"S","name":"S","kind":"typeparam"},{"id":"T","name":"T","kind":"typeparam"}],"uri":"dart-sdk//lib/async/stream.dart","kind":"class","comment":"\nBase class for transformers that modifies stream events.\n\nA [StreamEventTransformer] transforms incoming Stream\nevents of one kind into outgoing events of (possibly) another kind.\n\nSubscribing on the stream returned by [bind] is the same as subscribing on\nthe source stream, except that events are passed through the [transformer]\nbefore being emitted. The transformer may generate any number and\ntypes of events for each incoming event. Pauses on the returned\nsubscription are forwarded to this stream.\n\nAn example that duplicates all data events:\n\n    class DoubleTransformer<T> extends StreamEventTransformerBase<T, T> {\n      void handleData(T data, EventSink<T> sink) {\n        sink.add(value);\n        sink.add(value);\n      }\n    }\n    someTypeStream.transform(new DoubleTransformer<Type>());\n\nThe default implementations of the \"handle\" methods forward\nthe events unmodified. If using the default [handleData] the generic type [T]\nneeds to be assignable to [S].\n","line":"1065"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"id":"StreamTransformer","name":"StreamTransformer","children":[{"returnType":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"id":"bind1()","name":"bind","children":[{"ref":{"name":"Stream","refId":"dart.async/Stream","arguments":[{"name":"S","refId":"dart.async/StreamTransformer/S"}]},"id":"stream","name":"stream","kind":"param"}],"kind":"method","line":"1035"},{"id":"StreamTransformer3()","name":"StreamTransformer","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"handleData","name":"handleData","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","children":[{"ref":{"name":"S","refId":"dart.async/StreamTransformer/S"},"id":"data","name":"data","uri":"dart-sdk//lib/async/stream.dart","kind":"param","line":"1027"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"id":"sink","name":"sink","uri":"dart-sdk//lib/async/stream.dart","kind":"param","line":"1027"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"1027"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"handleError","name":"handleError","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","children":[{"ref":{"name":"AsyncError","refId":"dart.async/AsyncError"},"id":"error","name":"error","uri":"dart-sdk//lib/async/stream.dart","kind":"param","line":"1028"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"id":"sink","name":"sink","uri":"dart-sdk//lib/async/stream.dart","kind":"param","line":"1028"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"1028"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"id":"handleDone","name":"handleDone","children":[{"returnType":{"name":"void","refId":"void"},"id":"Function","name":"Function","children":[{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"T","refId":"dart.async/StreamTransformer/T"}]},"id":"sink","name":"sink","uri":"dart-sdk//lib/async/stream.dart","kind":"param","line":"1029"}],"uri":"dart-sdk//lib/core/function.dart","kind":"functiontype","line":"13"}],"kind":"param","line":"1029"}],"kind":"constructor","comment":"\nCreate a [StreamTransformer] that delegates events to the given functions.\n\nThis is actually a [StreamEventTransformer] where the event handling is\nperformed by the function arguments.\nIf an argument is omitted, it acts as the corresponding default method from\n[StreamEventTransformer].\n\nExample use:\n\n    stringStream.transform(new StreamTransformer<String, String>(\n        handleData: (Strung value, EventSink<String> sink) {\n          sink.add(value);\n          sink.add(value);  // Duplicate the incoming events.\n        }));\n\n","line":"1026"},{"id":"S","name":"S","kind":"typeparam"},{"id":"T","name":"T","kind":"typeparam"}],"uri":"dart-sdk//lib/async/stream.dart","kind":"class","comment":"\nThe target of a [Stream.transform] call.\n\nThe [Stream.transform] call will pass itself to this object and then return\nthe resulting stream.\n","line":"1008"}],"uri":"dart-sdk//lib/async/async.dart","kind":"library","line":"5"}],"id":"irc_client","children":[{"superclass":{"name":"StreamEventTransformer","refId":"dart.async/StreamEventTransformer","arguments":[{"name":"String","refId":"dart.core/String"},{"name":"Command","refId":"irc_client/Command"}]},"id":"IrcTransformer","name":"IrcTransformer","children":[{"returnType":{"name":"void","refId":"void"},"id":"handleData2()","name":"handleData","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"event","name":"event","kind":"param"},{"ref":{"name":"EventSink","refId":"dart.async/EventSink","arguments":[{"name":"Command","refId":"irc_client/Command"}]},"id":"sink","name":"sink","kind":"param"}],"kind":"method","line":"8"}],"uri":"irc_client/lib/src/transformer.dart","kind":"class","comment":"\nTransforms a stream of Strings into a stream of [Command]s. Used internally\nby [IrcClient].\n","line":"7"},{"superclass":{"name":"Handler","refId":"irc_client/Handler"},"id":"NickServHandler","name":"NickServHandler","children":[{"id":"_identify1()","name":"_identify","children":[{"ref":{"name":"Irc","refId":"irc_client/Irc"},"id":"irc","name":"irc","kind":"param"}],"kind":"method","isPrivate":true,"line":"31"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"onCommand2()","name":"onCommand","children":[{"ref":{"name":"Command","refId":"irc_client/Command"},"id":"cmd","name":"cmd","kind":"param"},{"ref":{"name":"Irc","refId":"irc_client/Irc"},"id":"irc","name":"irc","kind":"param"}],"kind":"method","line":"35"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"onConnection1()","name":"onConnection","children":[{"ref":{"name":"Irc","refId":"irc_client/Irc"},"id":"irc","name":"irc","kind":"param"}],"kind":"method","line":"65"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"_originalNick","name":"_originalNick","kind":"variable","isPrivate":true,"line":"24"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"nickservPassword","name":"nickservPassword","kind":"variable","line":"25"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_connected","name":"_connected","kind":"variable","isPrivate":true,"line":"26"},{"ref":{"name":"bool","refId":"dart.core/bool"},"id":"_first","name":"_first","kind":"variable","isPrivate":true,"line":"27"},{"id":"NickServHandler1()","name":"NickServHandler","children":[{"initializedField":{"name":"nickservPassword","refId":"irc_client/NickServHandler/nickservPassword"},"ref":{"name":"String","refId":"dart.core/String"},"id":"nickservPassword","name":"nickservPassword","kind":"param"}],"kind":"constructor","line":"29"}],"uri":"irc_client/lib/src/nickserv.dart","kind":"class","comment":"\nA handler which identifies with NickServ, and if another user is\nconnected with our nick, ghosts them so that we can connect.\n\nThis must be added to the IrcClient as the first handler. For example:\n\n    var bot = new IrcClient(\"bottymcbot\");\n    bot.realName = \"Mr Bot\";\n    bot.handlers.add(new NickServHandler(\"wibble\"));\n    bot.handlers.add(new MyHandler());\n    bot.run(\"irc.freenode.net\", 6667);\n\nWhen this handler is in use, subsequent handlers' [onConnection]\nmethods will not be called until this has succesfully identified\nitself.\n\nThis has been tested against freenode. If the implementation of\nNickServ returns messages in a different format, this will not\nwork. \n"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Handler","name":"Handler","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"onCommand2()","name":"onCommand","children":[{"ref":{"name":"Command","refId":"irc_client/Command"},"id":"cmd","name":"cmd","kind":"param"},{"ref":{"name":"Irc","refId":"irc_client/Irc"},"id":"irc","name":"irc","kind":"param"}],"kind":"method","comment":"\nCalled every time a command is received from the server. No more onCommand\nhandlers will be called if this one returns [true].\n","line":"11"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"onChannelMessage3()","name":"onChannelMessage","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"channel","name":"channel","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"},{"ref":{"name":"Irc","refId":"irc_client/Irc"},"id":"irc","name":"irc","kind":"param"}],"kind":"method","comment":"\nCalled every time a channel message is received from the server. Channel\nmessages are identified by the [channel] name starting with a hash (#).\nNo more onChannelMessage handlers will be called if this one returns [true].\n","line":"20"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"onPrivateMessage3()","name":"onPrivateMessage","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"nick","name":"nick","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"},{"ref":{"name":"Irc","refId":"irc_client/Irc"},"id":"irc","name":"irc","kind":"param"}],"kind":"method","comment":"\nCalled every time a private message is received from the server, addressed\nto the current nick. No more onPrivateMessage handlers will be called if \nthis one returns [true].\n","line":"29"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"id":"onConnection1()","name":"onConnection","children":[{"ref":{"name":"Irc","refId":"irc_client/Irc"},"id":"irc","name":"irc","kind":"param"}],"kind":"method","comment":"\nCalled after the client has finished connecting to the IRC server.\nNo more onConnection handlers will be called if this one returns [true].\n","line":"37"}],"uri":"irc_client/lib/src/handler.dart","kind":"class","comment":"\nExtend [Handler] to handle commands which are received from the IRC server. \n","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Command","name":"Command","children":[{"ref":{"name":"int","refId":"dart.core/int"},"id":"commandNumber","name":"commandNumber","kind":"property","comment":"\nReturns the command number or, if the command was not numberic,\nreturns -1.\n","line":"71"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"prefix","name":"prefix","kind":"variable","comment":"\nThe prefix without the leading colon (:), or null if there was not one.\n","line":"10"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"command","name":"command","kind":"variable","comment":"\nThe command.\n","line":"15"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"id":"params","name":"params","kind":"variable","comment":"\nA list of the parameters, including the trailing parameters.\n","line":"20"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"line","name":"line","kind":"variable","comment":"\nContains the original line received from the server.\n","line":"25"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"trailing","name":"trailing","kind":"variable","comment":"\nAny trailing text, without its leading colon (:). The trailing text\nis all the text from the first parameter which starts with a colon \nup to the end of the line, or if there is no colon-prefixed parameter,\nthe last paramter. \n","line":"33"},{"id":"Command1()","name":"Command","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"line","name":"line","kind":"param"}],"kind":"constructor","comment":"\nParses a line from the server into a [Command] object.\n","line":"38"}],"uri":"irc_client/lib/src/command.dart","kind":"class","comment":"\nContains a command which was received from the IRC server.\n","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Irc","name":"Irc","children":[{"returnType":{"name":"void","refId":"void"},"id":"write1()","name":"write","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"\nWrites the [message] to the irc server. (Currently also writes it to\nthe console, but will eventually replace with with a logger).\n","line":"23"},{"returnType":{"name":"void","refId":"void"},"id":"sendMessage2()","name":"sendMessage","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"nickOrChannel","name":"nickOrChannel","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"message","name":"message","kind":"param"}],"kind":"method","comment":"\nSends a private [message] to the [nickOrChannel]. \n","line":"31"},{"returnType":{"name":"void","refId":"void"},"id":"sendNotice2()","name":"sendNotice","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"user","name":"user","kind":"param"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"notice","name":"notice","kind":"param"}],"kind":"method","comment":"\nSends a [notice] to the [user].\n","line":"38"},{"returnType":{"name":"void","refId":"void"},"id":"join1()","name":"join","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"channel","name":"channel","kind":"param"}],"kind":"method","comment":"\nJoins a [channel].\n","line":"45"},{"returnType":{"name":"void","refId":"void"},"id":"setNick1()","name":"setNick","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"nick","name":"nick","kind":"param"}],"kind":"method","comment":"\nSets the current [nick].\n","line":"52"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"nick","name":"nick","kind":"property","comment":"\nReturns the current nickname\n","line":"17"},{"ref":{"name":"IrcClient","refId":"irc_client/IrcClient"},"id":"_client","name":"_client","kind":"variable","isPrivate":true,"line":"8"},{"ref":{"name":"Socket","refId":"dart.io/Socket"},"id":"_socket","name":"_socket","kind":"variable","isPrivate":true,"line":"9"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"_nick","name":"_nick","kind":"variable","isPrivate":true,"line":"10"},{"id":"Irc._internal2()","name":"Irc._internal","children":[{"initializedField":{"name":"_client","refId":"irc_client/Irc/_client"},"ref":{"name":"IrcClient","refId":"irc_client/IrcClient"},"id":"_client","name":"_client","kind":"param","isPrivate":true},{"initializedField":{"name":"_socket","refId":"irc_client/Irc/_socket"},"ref":{"name":"Socket","refId":"dart.io/Socket"},"id":"_socket","name":"_socket","kind":"param","isPrivate":true}],"kind":"constructor","isPrivate":true,"line":"12"}],"uri":"irc_client/lib/src/irc.dart","kind":"class","comment":"\nThe [Irc] object is passed to methods on the [Handler]s, so that they\ncan send commands back to the IRC server.\n","line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Commands","name":"Commands","children":[{"isStatic":true,"id":"NOTICE","name":"NOTICE","kind":"variable","line":"32"},{"isStatic":true,"id":"PRIVMSG","name":"PRIVMSG","kind":"variable","line":"33"},{"isStatic":true,"id":"USER","name":"USER","kind":"variable","line":"34"},{"isStatic":true,"id":"NICK","name":"NICK","kind":"variable","line":"35"},{"isStatic":true,"id":"PING","name":"PING","kind":"variable","line":"36"},{"isStatic":true,"id":"PONG","name":"PONG","kind":"variable","line":"37"},{"isStatic":true,"id":"JOIN","name":"JOIN","kind":"variable","line":"38"}],"uri":"irc_client/lib/src/constants.dart","kind":"class","comment":"\nConstants for commands strings.\n","line":"31"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Replies","name":"Replies","children":[{"isStatic":true,"id":"L_USER_CLIENT","name":"L_USER_CLIENT","kind":"variable","line":"16"},{"isStatic":true,"id":"L_USER_OP","name":"L_USER_OP","kind":"variable","line":"17"},{"isStatic":true,"id":"L_USER_UNKNOWN","name":"L_USER_UNKNOWN","kind":"variable","line":"18"},{"isStatic":true,"id":"L_USER_CHANNELS","name":"L_USER_CHANNELS","kind":"variable","line":"19"},{"isStatic":true,"id":"L_USER_ME","name":"L_USER_ME","kind":"variable","line":"20"},{"isStatic":true,"id":"MOTD_START","name":"MOTD_START","kind":"variable","line":"21"},{"isStatic":true,"id":"MOTD","name":"MOTD","kind":"variable","line":"22"},{"isStatic":true,"id":"END_OF_MOTD","name":"END_OF_MOTD","kind":"variable","line":"23"},{"isStatic":true,"id":"NAME_REPLY","name":"NAME_REPLY","kind":"variable","line":"24"},{"isStatic":true,"id":"END_OF_NAMES","name":"END_OF_NAMES","kind":"variable","line":"25"}],"uri":"irc_client/lib/src/constants.dart","kind":"class","comment":"\nConstants for reply command codes.\n","line":"15"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"Errors","name":"Errors","children":[{"isStatic":true,"id":"NO_NICKNAME_GIVEN","name":"NO_NICKNAME_GIVEN","kind":"variable","line":"7"},{"isStatic":true,"id":"NICKNAME_IN_USE","name":"NICKNAME_IN_USE","kind":"variable","line":"8"},{"isStatic":true,"id":"NOT_REGISTERED","name":"NOT_REGISTERED","kind":"variable","line":"9"}],"uri":"irc_client/lib/src/constants.dart","kind":"class","comment":"\nConstants for error commands codes.\n","line":"6"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"id":"IrcClient","name":"IrcClient","children":[{"id":"connected1()","name":"connected","children":[{"ref":{"name":"Irc","refId":"irc_client/Irc"},"id":"irc","name":"irc","kind":"param"}],"kind":"method","comment":"\nCall this to cause the [onConnection] methods of the [handlers] get\ncalled. This is usually not necessary, as the IrcClient or\nNickServHandler calls this when appropriate anyway.\n","line":"81"},{"id":"run2()","name":"run","children":[{"ref":{"name":"String","refId":"dart.core/String"},"id":"server","name":"server","kind":"param"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"6667","isOptional":true,"id":"port","name":"port","kind":"param"}],"kind":"method","comment":"\nConnects to the [server] on the given [port].\n\nCurrently there is no error handling, or handling of closed connections.\n","line":"94"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Handler","refId":"irc_client/Handler"}]},"id":"handlers","name":"handlers","kind":"property","comment":"\nMethods on [handlers] are called when commands are received from\nthe server. \n","line":"74"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"nick","name":"nick","kind":"variable","line":"58"},{"ref":{"name":"String","refId":"dart.core/String"},"id":"realName","name":"realName","kind":"variable","line":"59"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Handler","refId":"irc_client/Handler"}]},"id":"_handlers","name":"_handlers","kind":"variable","isPrivate":true,"line":"60"},{"id":"IrcClient1()","name":"IrcClient","children":[{"initializedField":{"name":"nick","refId":"irc_client/IrcClient/nick"},"ref":{"name":"String","refId":"dart.core/String"},"id":"nick","name":"nick","kind":"param"}],"kind":"constructor","comment":"\nCreate an IrcClient which will connect with the given [nick].\n","line":"65"}],"kind":"class","comment":"\nA very simple IRC client, which connects to an IRC server and then\ncalls methods on the supplied [handlers] when commands are received.\n\nAn example IRC bot:\n\n    import 'packages:irc_client/irc_client.dart';\n    \n    class BotHandler extends Handler {\n      bool onChannelMessage(String channel, String message, Irc irc) {\n        if (message.toLowerCase().contains(\"hello\")) {\n        irc.sendMessage(channel, \"Hey!\");#\n      }\n    }\n    \n    main() {\n      var bot = new IrcClient(\"bottymcbot\");\n      bot.handlers.add(new BotHandler());\n      bot.run(\"irc.freenode.net\");\n    }\n    \n","line":"57"}],"uri":"irc_client/lib/irc_client.dart","kind":"library","comment":"\nThis library lets you connect to an IRC server.\n\nA very basic IRC bot:\n\n    import 'packages:irc_client/irc_client.dart';\n    \n    class BotHandler extends Handler {\n      bool onChannelMessage(String channel, String message, Irc irc) {\n        if (message.toLowerCase().contains(\"hello\")) {\n        irc.sendMessage(channel, \"Hey!\");#\n      }\n    }\n    \n    main() {\n      var bot = new IrcClient(\"bottymcbot\");\n      bot.handlers.add(new BotHandler());\n      bot.run(\"irc.freenode.net\");\n    }\n\nThere is a more complex example in example/example.dart\n","line":"23"}